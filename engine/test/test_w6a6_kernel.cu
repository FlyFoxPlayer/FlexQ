// Copyright (C) 2024 ByteDance and/or its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//          http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <string>
#include <sstream>
#include "src/bgemm/flexq_bmma_library.h"
#include "src/bgemm/flexq_bmma_op.h"
#include "test_kernel.h"

void test_w6a6_kernel(int x_bits, int w_bits, int *d_x, int *d_w, int *d_x_pack, int *d_w_pack, half* d_x_scale, half* d_w_scale, int m,
                    int n, int k, half *d_out, half *h_out, half *h_ref_out, int warmup, int repeat,
                    bool quant_sign, int group_size, cudaStream_t stream)
{
    std::string config_str;
    std::stringstream s;
    s << x_bits << " " << w_bits << " " << m << " " << n << " " << k << " ";
    if (quant_sign) {
        s << "sign ";
    } else {
        s << "unsigned ";
    }
    config_str = s.str();
    float exec_dur = 0;
    float pack_dur = 0;
    float true_gflop_count = (float)m / 1e9 * n * k * 2 * x_bits * w_bits;
    float gflop_count = (float)m / 1e9 * n * k * 2;
    float max_gflop = 0;
    std::stringstream best_config;

    if (quant_sign) {
        // ------------------------FlexQ W6A6------------------------
        // cta<1,16,256> warp<8,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 1, 16, 256, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 16, 256, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 16, 256, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 16, 256, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 16, 256, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,16,256> warp<16,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 2, 16, 256, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 16, 256, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 16, 256, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 16, 256, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 16, 256, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,16,256> warp<24,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 4, 16, 256, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 16, 256, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 16, 256, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 16, 256, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 16, 256, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,16,256> warp<48,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 8, 16, 256, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 16, 256, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 16, 256, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 16, 256, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 16, 256, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,32,256> warp<8,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 1, 32, 256, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 32, 256, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 32, 256, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 32, 256, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 32, 256, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,32,256> warp<16,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 2, 32, 256, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 32, 256, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 32, 256, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 32, 256, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 32, 256, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,32,256> warp<24,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 4, 32, 256, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 32, 256, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 32, 256, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 32, 256, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 32, 256, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,32,256> warp<48,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 8, 32, 256, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 32, 256, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 32, 256, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 32, 256, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 32, 256, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,64,256> warp<8,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 1, 64, 256, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 64, 256, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 64, 256, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 64, 256, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 64, 256, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,64,256> warp<16,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 2, 64, 256, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 64, 256, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 64, 256, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 64, 256, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 64, 256, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,64,256> warp<24,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 4, 64, 256, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 64, 256, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 64, 256, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 64, 256, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 64, 256, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,64,256> warp<48,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 8, 64, 256, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 64, 256, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 64, 256, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 64, 256, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 64, 256, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,16,384> warp<8,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 1, 16, 384, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 16, 384, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 16, 384, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 16, 384, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 16, 384, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,16,384> warp<16,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 2, 16, 384, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 16, 384, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 16, 384, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 16, 384, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 16, 384, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,16,384> warp<24,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 4, 16, 384, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 16, 384, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 16, 384, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 16, 384, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 16, 384, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,16,384> warp<48,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 8, 16, 384, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 16, 384, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 16, 384, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 16, 384, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 16, 384, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,32,384> warp<8,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 1, 32, 384, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 32, 384, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 32, 384, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 32, 384, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 32, 384, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,32,384> warp<16,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 2, 32, 384, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 32, 384, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 32, 384, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 32, 384, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 32, 384, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,32,384> warp<24,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 4, 32, 384, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 32, 384, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 32, 384, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 32, 384, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 32, 384, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,32,384> warp<48,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 8, 32, 384, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 32, 384, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 32, 384, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 32, 384, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 32, 384, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,64,384> warp<8,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 1, 64, 384, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 64, 384, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 64, 384, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 64, 384, 8, 48, 128, 8, 8, 128, 5, 1);

        // cta<2,64,384> warp<16,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 2, 64, 384, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 64, 384, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 64, 384, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 64, 384, 16, 48, 128, 8, 8, 128, 5, 1);

        // cta<4,64,384> warp<24,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 4, 64, 384, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 64, 384, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 64, 384, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 64, 384, 24, 48, 128, 8, 8, 128, 5, 1);

        // cta<8,64,384> warp<48,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 8, 64, 384, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 64, 384, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 64, 384, 48, 48, 128, 8, 8, 128, 4, 1);

        // cta<1,16,512> warp<8,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 1, 16, 512, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 16, 512, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 16, 512, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 16, 512, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 16, 512, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,16,512> warp<16,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 2, 16, 512, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 16, 512, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 16, 512, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 16, 512, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 16, 512, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,16,512> warp<24,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 4, 16, 512, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 16, 512, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 16, 512, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 16, 512, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 16, 512, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,16,512> warp<48,48,128> mma<8,8,128>   WARPS[1x2]
        TEST(6, 6, true, 8, 16, 512, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 16, 512, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 16, 512, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 16, 512, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 16, 512, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,32,512> warp<8,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 1, 32, 512, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 32, 512, 8, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 1, 32, 512, 8, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 1, 32, 512, 8, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 1, 32, 512, 8, 48, 128, 8, 8, 128, 6, 1);

        // cta<2,32,512> warp<16,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 2, 32, 512, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 32, 512, 16, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 2, 32, 512, 16, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 2, 32, 512, 16, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 2, 32, 512, 16, 48, 128, 8, 8, 128, 6, 1);

        // cta<4,32,512> warp<24,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 4, 32, 512, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 32, 512, 24, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 4, 32, 512, 24, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 4, 32, 512, 24, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 4, 32, 512, 24, 48, 128, 8, 8, 128, 6, 1);

        // cta<8,32,512> warp<48,48,128> mma<8,8,128>   WARPS[1x4]
        TEST(6, 6, true, 8, 32, 512, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 32, 512, 48, 48, 128, 8, 8, 128, 3, 1);
        TEST(6, 6, true, 8, 32, 512, 48, 48, 128, 8, 8, 128, 4, 1);
        TEST(6, 6, true, 8, 32, 512, 48, 48, 128, 8, 8, 128, 5, 1);
        TEST(6, 6, true, 8, 32, 512, 48, 48, 128, 8, 8, 128, 6, 1);

        // cta<1,64,512> warp<8,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 1, 64, 512, 8, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 1, 64, 512, 8, 48, 128, 8, 8, 128, 3, 1);

        // cta<2,64,512> warp<16,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 2, 64, 512, 16, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 2, 64, 512, 16, 48, 128, 8, 8, 128, 3, 1);

        // cta<4,64,512> warp<24,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 4, 64, 512, 24, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 4, 64, 512, 24, 48, 128, 8, 8, 128, 3, 1);

        // cta<8,64,512> warp<48,48,128> mma<8,8,128>   WARPS[1x8]
        TEST(6, 6, true, 8, 64, 512, 48, 48, 128, 8, 8, 128, 2, 1);
        TEST(6, 6, true, 8, 64, 512, 48, 48, 128, 8, 8, 128, 3, 1);
    } else {
    }

    printf("The best kernel config is %s with %f TOPS\n", best_config.str().c_str(), max_gflop);
}